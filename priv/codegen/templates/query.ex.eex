# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `<%= @query_file %>`.
defmodule <%= @module_name %> do
  @query """
<%= String.trim_trailing(@query.statement, "\n") %>
"""

  @moduledoc """
  Generated module for the EdgeQL query from
    `<%= @query_file %>`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @query_file "<%= @query_file %>"

  <%= for {type_name, {typedoc, typespec}} <- @types do %>
  @typedoc """
  ```edgeql
  <%= typedoc %>
  ```
  """
  @type <%= type_name %> :: <%= typespec %>
  <% end %>

  <%= if @should_render_type_for_shape do %>
  defmodule Result do
    <%= @shape %>
  end
  <% end %>

  <%= if @query.has_positional_args do %>

  @doc """
  Run the query.
  """
  @spec query(
    client :: EdgeDB.client(),
    <%= Enum.map_join(@query.args, ",\n", &("arg_#{&1.name} :: #{&1.typespec}")) %>,
    opts :: list(EdgeDB.query_option())
  ) :: {:ok, <%= @result_type %>}
    | {:error, reason}
      when reason: any()
  def query(client, <%= Enum.map_join(@query.args, ",", &("arg_#{&1.name}")) %>, opts \\ []) do
    args = [<%= Enum.map_join(@query.args, ", ", &("arg_#{&1.name}")) %>]
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
    client :: EdgeDB.client(),
    <%= Enum.map_join(@query.args, ",\n", &("arg_#{&1.name} :: #{&1.typespec}")) %>,
    opts :: list(EdgeDB.query_option())
  ) :: <%= @result_type %>
  def query!(client, <%= Enum.map_join(@query.args, ",", &("arg_#{&1.name}")) %>, opts \\ []) do
    args = [<%= Enum.map_join(@query.args, ", ", &("arg_#{&1.name}")) %>]

    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  <% end %>

  <%= if @query.has_named_args do %>

  @type keyword_args() :: [<%= Enum.map_join(@query.args, " | ", &("{:#{&1.name}, #{&1.typespec}}")) %>]

  @type map_args() :: %{
    <%= for arg <- @query.args do %>
        <%= arg.name %>: <%= arg.typespec %>,
      <% end %>
  }

  @type args() :: map_args() | keyword_args()

  @doc """
  Run the query.
  """
  @spec query(
    client :: EdgeDB.client(),
    args :: args(),
    opts :: list(EdgeDB.query_option())
  ) ::
    {:ok, <%= @result_type %>}
    | {:error, reason}
      when reason: any()
  def query(client, args, opts \\ []) do
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
    client :: EdgeDB.client(),
    args :: args(),
    opts :: list(EdgeDB.query_option())
  ) :: <%= @result_type %>
  def query!(client, args, opts \\ []) do
    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  <% end %>

  <%= if length(@query.args) == 0 do %>

  @doc """
  Run the query.
  """
  @spec query(
    client :: EdgeDB.client(),
    opts :: list(EdgeDB.query_option())
  ) ::
    {:ok, <%= @result_type %>}
    | {:error, reason}
      when reason: any()
  def query(client, opts \\ []) do
    do_query(client, [], opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
    client :: EdgeDB.client(),
    opts :: list(EdgeDB.query_option())
  ) :: <%= @result_type %>
  def query!(client, opts \\ []) do
    case do_query(client, [], opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  <% end %>

  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __file__: @query_file, __transform_result__: [schema: @schema]);
    <%= case @query.cardinality do %>
      <% :at_most_one -> %>
        with {:ok, result} when not is_nil(result) <- EdgeDB.query_single(client, @query, args, opts) do
      
      <% :one -> %>
        with {:ok, result} <- EdgeDB.query_required_single(client, @query, args, opts) do
      
      <% :no_result -> %>
        with {:ok, result} <- EdgeDB.execute(client, @query, args, opts) do
      
      <% _ -> %>
        with {:ok, results} <- EdgeDB.query(client, @query, args, opts) do
          results = case results do
            [] -> nil
            _ -> Enum.map(results, fn result ->
    <% end %>

    <%= if @should_render_type_for_shape do %>
      %Result<%= @schema %>
    <% else %>
    {:ok, result}
    <% end %>

    <%= if @query.cardinality in [:at_least_one, :many] do %>
      end);
      end;
      {:ok, results};
    <% end %>
    end
  end
end
