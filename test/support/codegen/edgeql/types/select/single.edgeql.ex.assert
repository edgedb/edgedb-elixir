# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `test/support/codegen/edgeql/types/select/single.edgeql`.
defmodule Tests.Codegen.Queries.Types.Select.Single do
  @query """
  select v4::codegen::Aggregate {
      id,
  }
  limit 1
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `test/support/codegen/edgeql/types/select/single.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @query_file "test/support/codegen/edgeql/types/select/single.edgeql"

  @typedoc """
  ```edgeql
  std::uuid
  ```
  """
  @type uuid() :: binary()

  defmodule Result do
    @moduledoc false

    defstruct [
      :id
    ]

    @type t() :: %__MODULE__{
            id: Tests.Codegen.Queries.Types.Select.Single.uuid()
          }
  end

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          opts :: list(EdgeDB.query_option())
        ) :: {:ok, Result.t() | nil} | {:error, reason}
        when reason: any()
  def query(client, opts \\ []) do
    do_query(client, [], opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          opts :: list(EdgeDB.query_option())
        ) :: Result.t() | nil
  def query!(client, opts \\ []) do
    case do_query(client, [], opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __file__: @query_file)

    with {:ok, entity} when not is_nil(entity) <- EdgeDB.query_single(client, @query, args, opts) do
      result =
        with element when not is_nil(element) <- entity do
          %Result{
            id: element["id"]
          }
        end

      {:ok, result}
    end
  end
end
