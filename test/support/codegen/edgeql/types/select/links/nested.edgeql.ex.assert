# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `test/support/codegen/edgeql/types/select/links/nested.edgeql`.
defmodule Tests.Codegen.Queries.Types.Select.Links.Nested do
  @query """
  select v4::codegen::Aggregate {
      rl_number: {
          id,
          ml_int32: {
              op_int32,
              op_int32_type,
          },
          rl_decimal,
      },
  }
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `test/support/codegen/edgeql/types/select/links/nested.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @query_file "test/support/codegen/edgeql/types/select/links/nested.edgeql"

  @typedoc """
  ```edgeql
  scalar type v4::codegen::Int32Type extending std::int32
  ```
  """
  @type v4__codegen__int32_type() :: integer()

  @typedoc """
  ```edgeql
  std::uuid
  ```
  """
  @type uuid() :: binary()

  defmodule Result do
    @moduledoc false

    defmodule RlNumber do
      @moduledoc false

      defmodule MlInt32 do
        @moduledoc false

        defstruct [
          :op_int32,
          :op_int32_type
        ]

        @type t() :: %__MODULE__{
                op_int32: integer() | nil,
                op_int32_type:
                  Tests.Codegen.Queries.Types.Select.Links.Nested.v4__codegen__int32_type() | nil
              }
      end

      defmodule RlDecimal do
        @moduledoc false

        defstruct []

        @type t() :: %__MODULE__{}
      end

      defstruct [
        :id,
        :ml_int32,
        :rl_decimal
      ]

      @type t() :: %__MODULE__{
              id: Tests.Codegen.Queries.Types.Select.Links.Nested.uuid(),
              ml_int32: [MlInt32.t()],
              rl_decimal: RlDecimal.t()
            }
    end

    defstruct [
      :rl_number
    ]

    @type t() :: %__MODULE__{
            rl_number: RlNumber.t()
          }
  end

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          opts :: list(EdgeDB.query_option())
        ) :: {:ok, [Result.t()]} | {:error, reason}
        when reason: any()
  def query(client, opts \\ []) do
    do_query(client, [], opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          opts :: list(EdgeDB.query_option())
        ) :: [Result.t()]
  def query!(client, opts \\ []) do
    case do_query(client, [], opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __file__: @query_file)

    with {:ok, set} <- EdgeDB.query(client, @query, args, opts) do
      result =
        for element <- set do
          %Result{
            rl_number:
              with link <- element["rl_number"] do
                %Result.RlNumber{
                  id: link["id"],
                  ml_int32:
                    with link <- link["ml_int32"] do
                      for element <- link do
                        %Result.RlNumber.MlInt32{
                          op_int32: element["op_int32"],
                          op_int32_type: element["op_int32_type"]
                        }
                      end
                    end,
                  rl_decimal:
                    with _link <- link["rl_decimal"] do
                      %Result.RlNumber.RlDecimal{}
                    end
                }
              end
          }
        end

      {:ok, result}
    end
  end
end
