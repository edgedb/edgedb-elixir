# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `test/support/codegen/edgeql/types/insert/basic.edgeql`.
defmodule Tests.Codegen.Queries.Types.Insert.Basic do
  @query """
  insert v4::codegen::StrPropertiesType {
      rp_str := <str>$rp_str,
      rp_str_type := <v4::codegen::StrType>$rp_str_type,
  }
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `test/support/codegen/edgeql/types/insert/basic.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @query_file "test/support/codegen/edgeql/types/insert/basic.edgeql"

  @typedoc """
  ```edgeql
  scalar type v4::codegen::StrType extending std::str
  ```
  """
  @type v4__codegen__str_type() :: String.t()

  defmodule Result do
    @moduledoc false

    defstruct []

    @type t() :: %__MODULE__{}
  end

  @type keyword_args() :: [{:rp_str, String.t()} | {:rp_str_type, v4__codegen__str_type()}]
  @type map_args() :: %{rp_str: String.t(), rp_str_type: v4__codegen__str_type()}
  @type args() :: map_args() | keyword_args()

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) :: {:ok, Result.t()} | {:error, reason}
        when reason: any()
  def query(client, args, opts \\ []) do
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          args :: args(),
          opts :: list(EdgeDB.query_option())
        ) :: Result.t()
  def query!(client, args, opts \\ []) do
    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __file__: @query_file)

    with {:ok, _entity} <- EdgeDB.query_required_single(client, @query, args, opts) do
      result =
        %Result{}

      {:ok, result}
    end
  end
end
