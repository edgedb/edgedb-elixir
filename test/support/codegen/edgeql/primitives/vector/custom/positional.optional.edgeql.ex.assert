# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `test/support/codegen/edgeql/primitives/vector/custom/positional.optional.edgeql`.
defmodule Tests.Codegen.Queries.Primitives.Vector.Custom.Positional.Optional do
  @query """
  select <optional v4::codegen::VectorType>$0
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `test/support/codegen/edgeql/primitives/vector/custom/positional.optional.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @query_file "test/support/codegen/edgeql/primitives/vector/custom/positional.optional.edgeql"

  @typedoc """
  ```edgeql
  scalar type v4::codegen::VectorType extending ext::pgvector::vector
  ```
  """
  @type v4__codegen__vector_type() :: [float()]

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          arg_0 :: v4__codegen__vector_type() | nil,
          opts :: list(EdgeDB.query_option())
        ) :: {:ok, v4__codegen__vector_type() | nil} | {:error, reason}
        when reason: any()
  def query(client, arg_0, opts \\ []) do
    args = [arg_0]
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          arg_0 :: v4__codegen__vector_type() | nil,
          opts :: list(EdgeDB.query_option())
        ) :: v4__codegen__vector_type() | nil
  def query!(client, arg_0, opts \\ []) do
    args = [arg_0]

    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __file__: @query_file)

    EdgeDB.query_single(client, @query, args, opts)
  end
end
