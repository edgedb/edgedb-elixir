# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for EdgeDB via `mix edgedb.generate` from
#   `test/support/codegen/edgeql/primitives/scalars/cal/date_duration/std/literal.edgeql`.
defmodule Tests.Codegen.Queries.Primitives.Scalars.Cal.DateDuration.Std.Literal do
  @query """
  select <cal::date_duration>"45 days"
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `test/support/codegen/edgeql/primitives/scalars/cal/date_duration/std/literal.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @query_file "test/support/codegen/edgeql/primitives/scalars/cal/date_duration/std/literal.edgeql"

  @doc """
  Run the query.
  """
  @spec query(
          client :: EdgeDB.client(),
          opts :: list(EdgeDB.query_option())
        ) :: {:ok, EdgeDB.DateDuration.t()} | {:error, reason}
        when reason: any()
  def query(client, opts \\ []) do
    do_query(client, [], opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: EdgeDB.client(),
          opts :: list(EdgeDB.query_option())
        ) :: EdgeDB.DateDuration.t()
  def query!(client, opts \\ []) do
    case do_query(client, [], opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __file__: @query_file)

    EdgeDB.query_required_single(client, @query, args, opts)
  end
end
